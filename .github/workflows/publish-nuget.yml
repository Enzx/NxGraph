name: Publish

on:
  push:
    tags:
      - "v*"
      - "serialization/v*"
      - "serialization-abstraction/v*"
  workflow_dispatch:
    inputs:
      target:
        description: "Which package(s) to publish: all | serialization | serialization-abstraction"
        required: true
        default: all
      version:
        description: "SemVer to publish (e.g., 1.2.3 or 1.2.3-beta.1). Required for manual runs."
        required: true

permissions:
  contents: read

concurrency:
  group: publish-${{ github.ref }}
  cancel-in-progress: false

env:
  CONFIGURATION: Release
  NUGET_SOURCE: https://api.nuget.org/v3/index.json
  ARTIFACTS_DIR: artifacts
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: 1

jobs:
  pack-and-publish:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
          cache: true
          cache-dependency-path: |
            **/*.csproj
            **/packages.lock.json

      - name: Preflight â€” verify NuGet API key is available
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${NUGET_API_KEY:-}" ]; then
            echo "::error::NUGET_API_KEY is not set or not visible to this workflow run."
            echo "Check: repo/organization secrets, environment scope, and that this run is not from a forked PR."
            exit 1
          fi
          echo "::add-mask::$NUGET_API_KEY"
          echo "NuGet API key is present."

      - run: dotnet restore

      - run: dotnet build --no-restore --configuration "$CONFIGURATION"

      - run: dotnet test  --no-build --configuration "$CONFIGURATION" --verbosity normal

      - name: Resolve target and version
        id: ver
        shell: bash
        run: |
          set -euo pipefail

          if [[ "${GITHUB_REF_TYPE:-}" == "tag" ]]; then
            case "${GITHUB_REF_NAME}" in
              v*) TARGET=all; VER="${GITHUB_REF_NAME#v}" ;;
              serialization/v*) TARGET=serialization; VER="${GITHUB_REF_NAME#serialization/v}" ;;
              serialization-abstraction/v*) TARGET=serialization-abstraction; VER="${GITHUB_REF_NAME#serialization-abstraction/v}" ;;
              *) echo "::error::Unsupported tag format '${GITHUB_REF_NAME}'."; exit 1 ;;
            esac
          else
            TARGET="${{ github.event.inputs.target }}"
            VER="${{ github.event.inputs.version }}"
          fi

          if [[ ! "$VER" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)(-[0-9A-Za-z.-]+)?$ ]]; then
            echo "::error::Version '$VER' is not valid SemVer."; exit 1
          fi

          echo "target=$TARGET"   >> "$GITHUB_OUTPUT"
          echo "version=$VER"     >> "$GITHUB_OUTPUT"
          echo "Resolved: target=$TARGET, version=$VER"

      - run: mkdir -p "$ARTIFACTS_DIR"

      # Pack NxGraph (only on 'all')
      - name: Pack NxGraph
        if: ${{ steps.ver.outputs.target == 'all' }}
        run: >
          dotnet pack NxGraph/NxGraph.csproj
          --configuration $CONFIGURATION -o $ARTIFACTS_DIR
          -p:ContinuousIntegrationBuild=true -p:Deterministic=true
          -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg
          -p:DebugType=portable
          -p:PublishRepositoryUrl=true
          -p:RepositoryUrl=${{ github.server_url }}/${{ github.repository }}
          -p:RepositoryBranch=${{ github.ref_name }}
          -p:RepositoryCommit=${{ github.sha }}
          -p:EmbedUntrackedSources=true
          -p:PackageVersion=${{ steps.ver.outputs.version }}

      # Pack Serialization (on 'all' or 'serialization')
      - name: Pack NxGraph.Serialization
        if: ${{ steps.ver.outputs.target == 'all' || steps.ver.outputs.target == 'serialization' }}
        run: >
          dotnet pack NxGraph.Serialization/NxGraph.Serialization.csproj
          --configuration $CONFIGURATION -o $ARTIFACTS_DIR
          -p:ContinuousIntegrationBuild=true -p:Deterministic=true
          -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg
          -p:DebugType=portable
          -p:PublishRepositoryUrl=true
          -p:RepositoryUrl=${{ github.server_url }}/${{ github.repository }}
          -p:RepositoryBranch=${{ github.ref_name }}
          -p:RepositoryCommit=${{ github.sha }}
          -p:EmbedUntrackedSources=true
          -p:PackageVersion=${{ steps.ver.outputs.version }}

      # Pack Serialization.Abstraction (on 'all' or 'serialization-abstraction')
      - name: Pack NxGraph.Serialization.Abstraction
        if: ${{ steps.ver.outputs.target == 'all' || steps.ver.outputs.target == 'serialization-abstraction' }}
        run: >
          dotnet pack NxGraph.Serialization.Abstraction/NxGraph.Serialization.Abstraction.csproj
          --configuration $CONFIGURATION -o $ARTIFACTS_DIR
          -p:ContinuousIntegrationBuild=true -p:Deterministic=true
          -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg
          -p:DebugType=portable
          -p:PublishRepositoryUrl=true
          -p:RepositoryUrl=${{ github.server_url }}/${{ github.repository }}
          -p:RepositoryBranch=${{ github.ref_name }}
          -p:RepositoryCommit=${{ github.sha }}
          -p:EmbedUntrackedSources=true
          -p:PackageVersion=${{ steps.ver.outputs.version }}

      - name: List artifacts
        shell: bash
        run: |
          set -euo pipefail
          ls -al "$ARTIFACTS_DIR" || true

      - name: Validate package and symbol contents
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          echo "== Listing assemblies in nupkg =="
          for f in "$ARTIFACTS_DIR"/*.nupkg; do
            echo "---- $(basename "$f")"
            unzip -l "$f" | grep -E '(^|/)(lib|ref|runtimes)/' || true
            echo "---- nuspec id/version ----"
            unzip -p "$f" "*.nuspec" | grep -E "<id>|<version>" || true
          done
          echo "== Listing PDBs in snupkg =="
          for f in "$ARTIFACTS_DIR"/*.snupkg; do
            echo "---- $(basename "$f")"
            unzip -l "$f" | grep -E '\.pdb$' || true
          done

      - name: Push .nupkg to nuget.org
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: >
          dotnet nuget push "$ARTIFACTS_DIR"/*.nupkg
          --api-key "$NUGET_API_KEY"
          --source "$NUGET_SOURCE"
          --skip-duplicate

      - name: Push .snupkg (symbols)
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: >
          dotnet nuget push "$ARTIFACTS_DIR"/*.snupkg
          --api-key "$NUGET_API_KEY"
          --source "$NUGET_SOURCE"
          --skip-duplicate

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: nuget-${{ steps.ver.outputs.target }}-${{ steps.ver.outputs.version }}
          path: |
            ${{ env.ARTIFACTS_DIR }}/*.nupkg
            ${{ env.ARTIFACTS_DIR }}/*.snupkg
          if-no-files-found: ignore
